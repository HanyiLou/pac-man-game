const closeRulesButton = document.getElementById("close-rules");
const knowRulesButton = document.getElementById("know-rules");//"我已了解"按钮
const rulesLink = document.getElementById("rules-link");
const waitbutton = document.getElementById('waitBtn');
const helpbutton = document.getElementById('helpBtn');
const rulesModal = document.getElementById("rules-modal");

rulesModal.style.display = "none";

// 点击导航栏的"规则"选项时重新显示规则弹窗
rulesLink.addEventListener("click", (e) => {
	e.preventDefault();
	rulesModal.style.display = "block";
	
});
 // 点击关闭按钮后隐藏规则弹窗
 closeRulesButton.addEventListener("click", () => {
	rulesModal.style.display = "none";

});
 // 点击"我已了解"按钮后关闭规则弹窗并显示游戏界面
 knowRulesButton.addEventListener('click', () => {
	rulesModal.style.display = "none";
	
});

//主程序,业务逻辑
(function () {
	var _COIGIG = [		//关卡
		{				//第1关
			'map': [		//地图数据
				[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1],
				[1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1],
				[1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
			],
			'wall_color': '#09f',
			'goods': {		//能量豆
				'1,3': 1,
				'26,3': 1,
				'1,23': 1,
				'26,23': 1
			}
		},
		{				//第2关
			'map': [		//地图数据
				[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1],
				[1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1],
				[1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
			],
			'wall_color': '#FF5983',
			'goods': {		//能量豆
				'1,2': 1,
				'26,2': 1,
				'1,27': 1,
				'26,27': 1
			}
		},
		{				//第3关
			'map': [		//地图数据
				[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1],
				[1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1],
				[1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
			],
			'wall_color': '#E08031',
			'goods': {		//能量豆
				'1,2': 1,
				'26,2': 1,
				'1,23': 1,
				'26,23': 1
			}
		},
		{				//第4关
			'map': [		//地图数据
				[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1],
				[1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1],
				[1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
			],
			'wall_color': '#37C6C0',
			'goods': {		//能量豆
				'1,3': 1,
				'26,3': 1,
				'1,28': 1,
				'26,28': 1
			}
		},
		{				//第5关
			'map': [		//地图数据
				[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1],
				[1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1],
				[1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
			],
			'wall_color': '#5ED5D1',
			'goods': {		//能量豆
				'1,3': 1,
				'26,3': 1,
				'1,27': 1,
				'26,27': 1
			}
		},
		{				//第6关
			'map': [		//地图数据
				[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1],
				[1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1],
				[1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
			],
			'wall_color': '#7E884F',
			'goods': {		//能量豆
				'1,3': 1,
				'26,3': 1,
				'1,28': 1,
				'26,28': 1
			}
		},
		{				//第7关
			'map': [		//地图数据
				[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1],
				[1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1],
				[1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
			],
			'wall_color': '#C9C',
			'goods': {		//能量豆
				'1,3': 1,
				'26,3': 1,
				'1,24': 1,
				'26,24': 1
			}
		},
		{				//第8关
			'map': [		//地图数据
				[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1],
				[1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1],
				[1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
			],
			'wall_color': '#EB3F2F',
			'goods': {		//能量豆
				'1,4': 1,
				'26,4': 1,
				'1,25': 1,
				'26,25': 1
			}
		},
		{				//第9关
			'map': [		//地图数据
				[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1],
				[1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1],
				[1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
			],
			'wall_color': '#2E68AA',
			'goods': {		//能量豆
				'1,6': 1,
				'26,6': 1,
				'1,27': 1,
				'26,27': 1
			}
		},
		{				//第10关
			'map': [		//地图数据
				[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1],
				[1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1],
				[1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
			],
			'wall_color': '#C1194E',
			'goods': {		//能量豆
				'1,4': 1,
				'26,4': 1,
				'1,28': 1,
				'26,28': 1
			}
		},
		/* {				//第11关
			'map': [		//地图数据
				[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1],
				[1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1],
				[1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
			],
			'wall_color': '#56A36C',
			'goods': {		//能量豆
				'1,3': 1,
				'26,3': 1,
				'1,28': 1,
				'26,28': 1
			}
		},
		{				//第12关
			'map': [		//地图数据
				[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1],
				[1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1],
				[1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1],
				[1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1],
				[1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
				[1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
				[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
			],
			'wall_color': '#9966CC',
			'goods': {		//能量豆
				'1,4': 1,
				'26,4': 1,
				'1,27': 1,
				'26,27': 1
			}
		} */
	];

	_COLOR = ['#F00', '#F93', '#0CF', '#F9C'],	//NPC颜色
		_COS = [1, 0, -1, 0],
		_SIN = [0, 1, 0, -1],
		_LIFE = 1,				//玩家生命值
		_SCORE = 0;				//玩家得分
	
	var game = new Game('canvas');
	var roundData = []; // <--- 添加这行：用于存储每轮结果的数组
	//启动页
	(function () {
		var stage = game.createStage();
		//logo
		stage.createItem({
			x: game.width / 2,
			y: game.height * .35,
			width: 100,
			height: 100,
			frames: 3,
			draw: function (context) {
				var t = Math.abs(5 - this.times % 10);
				context.fillStyle = '#FFE600';
				context.beginPath();
				context.arc(this.x, this.y, this.width / 2, t * .04 * Math.PI, (2 - t * .04) * Math.PI, false);
				context.lineTo(this.x, this.y);
				context.closePath();
				context.fill();
				context.fillStyle = '#000';
				context.beginPath();
				context.arc(this.x + 5, this.y - 27, 7, 0, 2 * Math.PI, false);
				context.closePath();
				context.fill();
			}
		});
		// 游戏名
		stage.createItem({
			x: game.width / 2,
			y: game.height * .5,
			draw: function (context) {
				context.font = 'bold 42px PressStart2P';
				context.textAlign = 'center';
				context.textBaseline = 'middle';
				context.fillStyle = '#FFF';
				context.fillText('Pac-Man', this.x, this.y);
			}
		});
		// 提示
		stage.createItem({
			x: game.width / 2,
			y: game.height * .64,
			frames: 28,
			draw: function (context) {
				if (this.times % 2) {
					context.font = 'bold 14px PressStart2P';
					context.textAlign = 'center';
					context.textBaseline = 'middle';
					context.fillStyle = '#AAA';
					context.fillText('Press Enter to start', this.x, this.y);
				}
			}
		});

		//事件绑定
		stage.bind('keydown', function (e) {
			switch (e.keyCode)  {
				case 13: // Enter 回车键
				case 32: // Space 空格键
                    // --- 记录日志: 游戏开始 (从启动页进入Demo) ---
                    if (typeof logGameEvent === 'function') {
                        logGameEvent('GameStartInitiated'); // 表示用户按键开始
                    }
                    game.setStage(1); // 跳转到Demo教学关卡 (新索引 1)
					break;
			}
		});
	})();

	// 舞台 1: Demo教学关卡 (新添加 - 互动版)
(function () {
    var stage = game.createStage({ index: 1 }); // 明确指定索引
    var demoStep = 0; // 0: 初始文本, 1: 等待左移, 2: 等待右移, 3: 等待上移, 4: 等待下移, 5: 显示总结, 6: 等待开始
    var demoPacman = null; // 教学用吃豆人
    var instructionText = null; // 当前显示的教学文本Item
    var targetX = null, targetY = null; // 动画目标位置
    var isAnimating = false; // 是否正在移动动画中
    var animSpeed = 4; // 动画移动速度 (像素/帧)

    // 存储不同步骤的文本内容
    const texts = [
        "欢迎来到游戏教学！\n\n按 [Enter] 键开始学习操作。", // Step 0
        "请按键盘 ← 键，让吃豆人向左移动。",           // Step 1
        "很好！现在请按 → 键，向右移动。",             // Step 2
        "试试按 ↑ 键向上移动。",                    // Step 3
        "最后，请按 ↓ 键向下移动。",                  // Step 4
        "太棒了！你已掌握基本移动。\n\n目标：与队友合作吃掉所有豆子。\n得分：吃豆得分，越快越好，平分收益。\n\n按 [Enter] 键准备开始第一回合！", // Step 5 & 6 合并提示
    ];

    // 创建或更新教学文本的函数
    function updateInstructionText() {
        if (!instructionText) {
            instructionText = stage.createItem({
                x: game.width / 2,
                y: game.height * 0.6, // 文本位置靠下
                draw: function (context) {
                    if (demoStep < texts.length && !isAnimating) { // 只在非动画时显示当前步骤文本
                        context.font = '18px sans-serif';
                        context.textAlign = 'center';
                        context.textBaseline = 'middle';
                        context.fillStyle = '#DDD';
                        // 处理换行符
                        const lines = texts[demoStep].split('\n');
                        lines.forEach((line, index) => {
                            context.fillText(line, this.x, this.y + index * 25); // 调整行间距
                        });

                        // 在最后一步添加闪烁提示
                        if (demoStep === 5 && this.times % 28 < 14) { // 使用 stage 的 times 实现闪烁
                             context.font = 'bold 16px PressStart2P';
                             context.fillStyle = '#AAA';
                             context.fillText('Press Enter to start Round 1', this.x, this.y + lines.length * 25 + 20);
                        }
                    }
                }
            });
             // 在 instructionText 创建后设置其 times 属性以进行闪烁
             instructionText.times = 0; // 初始化 times
             const originalDraw = instructionText.draw; // 保存原始 draw
             instructionText.draw = function(context) { // 包装 draw 来更新 times
                  this.times = stage.items[0]?.times || 0; // 从舞台或其他稳定 Item 获取 times
                  originalDraw.call(this, context);
             }

        }
        // (可选) 如果需要显式更新文本内容，可以在这里调用
        // instructionText.text = texts[demoStep]; // (需要修改 draw 函数来使用 this.text)
    }


    stage.init = function() { // 每次进入/重置教学关卡时调用
        this.status = 1;
        demoStep = 0; // 重置教学步骤
        isAnimating = false;

        // 创建教学吃豆人 (如果还不存在)
        if (!demoPacman) {
            demoPacman = stage.createItem({
                x: game.width / 2,
                y: game.height / 2 - 50, // 初始位置在屏幕中心偏上
                width: 30,
                height: 30,
                orientation: 0, // 初始朝右
                visible: false, // 初始隐藏，在教学步骤中显示
                frames: 10, // 用于可能的动画
                draw: function (context) {
                    if (!this.visible) return;
                    context.fillStyle = '#FFE600'; // 黄色
                    context.beginPath();
                    // 简单的嘴巴动画 (基于 isAnimating 或 stage.times)
                    let mouthAngle = (stage.items[0]?.times % this.frames < this.frames / 2) ? 0.20 : 0.05;
                    if (isAnimating) mouthAngle = 0.20; // 移动时张嘴大点
                    context.arc(this.x, this.y, this.width / 2, (.5 * this.orientation + mouthAngle) * Math.PI, (.5 * this.orientation - mouthAngle) * Math.PI, false);
                    context.lineTo(this.x, this.y);
                    context.closePath();
                    context.fill();
                }
            });
             // 同样为 demoPacman 添加 times 更新
            const originalPacmanDraw = demoPacman.draw;
            demoPacman.draw = function(context) {
                this.times = stage.items[0]?.times || 0; // 从舞台或其他稳定 Item 获取 times
                originalPacmanDraw.call(this, context);
            }
        } else {
            // 重置位置和可见性
            demoPacman.x = game.width / 2;
            demoPacman.y = game.height / 2 - 50;
            demoPacman.visible = false;
            demoPacman.orientation = 0;
        }

        targetX = demoPacman.x; // 动画目标初始为当前位置
        targetY = demoPacman.y;

        updateInstructionText(); // 更新/创建初始教学文本

        if (typeof logGameEvent === 'function') {
            logGameEvent('DemoStart', { timestamp: Date.now() });
        }
    };

    stage.update = function() { // 每帧更新
        if (isAnimating) {
            let dx = targetX - demoPacman.x;
            let dy = targetY - demoPacman.y;
            let distance = Math.sqrt(dx * dx + dy * dy);

            if (distance < animSpeed) {
                // 到达目标
                demoPacman.x = targetX;
                demoPacman.y = targetY;
                isAnimating = false;

                // 动画结束后，推进教学步骤
                if (demoStep >= 1 && demoStep <= 4) {
                    demoStep++;
                    updateInstructionText(); // 更新显示的文本
                     // 检查是否所有移动都完成，如果是，直接跳到总结步骤
                    if (demoStep === 5) {
                       // demoPacman.visible = false; // 可以选择隐藏吃豆人
                    }
                }
            } else {
                // 继续移动
                demoPacman.x += (dx / distance) * animSpeed;
                demoPacman.y += (dy / distance) * animSpeed;
            }
        }
         // 更新教学文本的 times 属性以进行闪烁（如果文本item自己不更新的话）
         if (instructionText && typeof instructionText.times !== 'undefined') {
             instructionText.times = stage.items[0]?.times || 0; // 尝试从第一个item获取times
         }
         if (demoPacman && typeof demoPacman.times !== 'undefined') {
             demoPacman.times = stage.items[0]?.times || 0;
         }
    };

    // 标题 (保持不变)
    stage.createItem({
        x: game.width / 2, y: game.height * .15, // 稍微上移标题
        draw: function (context) {
            context.font = 'bold 36px PressStart2P';
            context.textAlign = 'center';
            context.textBaseline = 'middle';
            context.fillStyle = '#FFF';
            context.fillText('游戏教学', this.x, this.y);
        }
    });

    // 事件绑定
    stage.bind('keydown', function (e) {
        if (isAnimating) return; // 动画播放中，忽略输入

        const moveDistance = 60; // 每次移动的距离

        switch (demoStep) {
            case 0: // 等待 Enter 开始教学
                if (e.keyCode === 13) { // Enter
                    demoStep = 1;
                    demoPacman.visible = true; // 显示吃豆人
                    updateInstructionText();
                }
                break;
            case 1: // 等待左移
                if (e.keyCode === 37) { // Left Arrow
                    demoPacman.orientation = 2;
                    targetX = demoPacman.x - moveDistance;
                    targetY = demoPacman.y;
                    isAnimating = true;
                    updateInstructionText(); // 清除或更新文本（可选，当前在动画结束时更新）
                }
                break;
            case 2: // 等待右移
                if (e.keyCode === 39) { // Right Arrow
                    demoPacman.orientation = 0;
                    targetX = demoPacman.x + moveDistance;
                    targetY = demoPacman.y;
                    isAnimating = true;
                    updateInstructionText();
                }
                break;
            case 3: // 等待上移
                if (e.keyCode === 38) { // Up Arrow
                    demoPacman.orientation = 3;
                    targetX = demoPacman.x;
                    targetY = demoPacman.y - moveDistance;
                    isAnimating = true;
                    updateInstructionText();
                }
                break;
            case 4: // 等待下移
                if (e.keyCode === 40) { // Down Arrow
                    demoPacman.orientation = 1;
                    targetX = demoPacman.x;
                    targetY = demoPacman.y + moveDistance;
                    isAnimating = true;
                    updateInstructionText();
                }
                break;
            case 5: // 显示总结文本，等待 Enter 开始游戏
                if (e.keyCode === 13) { // Enter
                    if (typeof logGameEvent === 'function') {
                        logGameEvent('DemoEnd', { timestamp: Date.now() });
                    }
                    window.currentGameRound = 1; // 设置初始回合数为 1
                    game.setStage(2); // 跳转到第一个游戏关卡舞台 (新索引 2)
                }
                break;
        }
    });

})(); // 结束教学关卡的立即执行函数

	//游戏主程序
	var all_scores = 0; // 玩家所有回合的总得分 
	var total_scores = 0; // 所有回合可获得的总豆数 
	var roundStartTimestamp = 0; // 用于计算回合持续时间
	
	(function () {
		_COIGIG.forEach(function (config, index) {
			var stage, map, beans, items, player, totalBeans, remainingBeans;
            // 注意: 这个作用域内的 _SCORE 似乎每回合重置，可能是回合得分？
            // 为了清晰起见，如果它只是用于本回合 NPC 的得分，我们重命名它
            let npcRoundScore = 0; // 本回合NPC得分

			// 计算本回合的总豆数
			totalBeans = 0;
			config['map'].forEach(row => {
				row.forEach(cell => {
					if (cell === 0) totalBeans++;
				});
			});
			total_scores += totalBeans; // 累加所有回合可能的总豆数
			remainingBeans = totalBeans; // 本回合剩余豆数
			

			stage = game.createStage({
				status: 1,
				missionTriggered: false, // 添加任务触发标志
				timeout: 30,
				roundNumber: index + 1, // 在 stage 对象中存储回合数 (从 1 开始)
				index: index + 2, // 索引从2开始(0=启动页,1=教学关)
				init: function() {// 当通过 setStage 启动或重置舞台时调用
					// --- 记录日志: 回合开始 ---
					window.currentGameRound = this.roundNumber; // 更新全局回合数变量
                    roundStartTimestamp = Date.now(); // 记录回合开始时间戳
					
                    if (typeof logGameEvent === 'function') {
                        logGameEvent('RoundStart', {
                            round: this.roundNumber,
                            totalBeansInRound: totalBeans, // 记录本回合总豆数
							startTimestamp: roundStartTimestamp // 记录开始时间戳
                        });
                    }
                    npcRoundScore = 0; // 重置本回合NPC得分
                    player.score = 0;  // 重置本回合玩家得分
                    remainingBeans = totalBeans; // 重置本回合剩余豆数
                    this.status = 1; // 确保初始化/重置时状态为活动
					this.timeout = 30; // 重置 timeout?
					this.missionTriggered = false; // 重置任务触发标志

                    /* // 重置物体 (玩家, NPCs)
					items.forEach(function (item) {
                        // 重置 NPC 特定状态 (如果需要)
                        if (item.type === 2) { // 如果是 NPC
                             Object.assign(item, item._settings, item._params); // 使用 game.js 模板中的基础重置
                             item.coord = { x: 18 + item._id, y: 8 }; // 重置位置 (根据需要调整)
                             item.vector = { x: 12 + item._id, y: 14 }; // 重置目标?
                             item.orientation = 3; // 重置方向为上
                             item.status = 1; // 重置状态为正常
                             item.timeout = Math.floor(Math.random() * 120); // 重置随机超时
                             item.startDelay = Math.floor(Math.random() * 30) + 90; // 重置随机启动延迟
                             item.active = false; // 重置为非活动状态
                             item.path = []; // 清空路径
                        }
					}); */

                    // 重置玩家特定状态
					player.coord = { x: 13.5, y: 23 }; // 重置玩家位置
					player.orientation = 2; // 重置玩家方向为左
					player.control = {}; // 清除待处理的控制输入
					player.visible = true; // 设为可见
					player.isWaiting = false; // 重置等待状态
					player.isHelping = false; // 重置帮助状态
                    player.moving = false; // 重置移动标志
					var pos = map.coord2position(player.coord.x, player.coord.y); // 计算画布坐标
					player.x = pos.x;
					player.y = pos.y;

                    // 重置豆子地图 (如果 game.js 的 resetMaps 不能自动处理)
                    if (beans && beans._params && beans._params.data) {
                       beans.data = JSON.parse(JSON.stringify(beans._params.data)); // 深度拷贝原始地图数据
                    }
				}, // End stage.init
				update: function () { // 每帧更新函数
					var stage = this;
					if (stage.status == 1) { // 场景正常运行时

						// 碰撞检测 (NPC vs 玩家) - 简化版，原代码大部分被注释掉了
						items.forEach(function (item) { // item 在这里是 NPC
							if (player.isWaiting || player.status === 3) return; // 如果玩家在等待或已“死亡”，则跳过
							if (item.status === 1 || item.status === 3) { // 如果 NPC 状态是正常或害怕
                                // 检查 NPC 和玩家是否都在有效的格子内
                                if (map && map.get(item.coord.x, item.coord.y) <= 0 && map.get(player.coord.x, player.coord.y) <= 0) {
                                    var dx = item.x - player.x;
                                    var dy = item.y - player.y;
                                    if (dx * dx + dy * dy < 750) { // 简单的碰撞半径检测 (约 27 像素)
                                        if (item.status == 3) { // NPC 处于害怕状态
                                            item.status = 4; // NPC 被吃 (状态4似乎未在别处使用，也许只是重置?)
                                            // --- 记录日志: NPC 被玩家吃掉 (害怕状态) ---
                                             if (typeof logGameEvent === 'function') {
                                                 logGameEvent('NPCStateChange', { npcId: item._id, newState: 'eaten_scared', playerPosition: {x: player.coord.x, y: player.coord.y} });
                                             }
                                            // item.coord = { x: 18 + item._id, y: 8 }; // 送回起点
                                            // item.status = 1; // 重置状态为正常
                                            // _SCORE += 10; // 示例得分
                                        } else if (item.status == 1) { // NPC 处于正常状态
                                            // --- 记录日志: 玩家被抓住 ---
                                            if (typeof logGameEvent === 'function') {
                                                 logGameEvent('PlayerStateChange', { newState: 'caught', npcId: item._id, npcPosition: {x: item.coord.x, y: item.coord.y} });
                                             }
                                            // 原代码注释了这部分，游戏似乎不处理生命值/死亡
                                            // stage.status = 3; // 设置为玩家被抓状态
                                            // stage.timeout = 30; // 用于死亡动画的超时?
                                            // _LIFE--; // 减少生命值 (如果使用生命值系统)
                                        }
                                    }
                                }
                            }
						});

						// 检查是否所有豆子都被吃完
						if (remainingBeans <= 0 && stage.status === 1) { // 确保只触发一次且在活动状态下
							// --- 记录日志: 回合结束 (所有豆子吃完) ---
                            const roundEndTime = Date.now(); // **记录回合结束时间戳**
                            const roundDuration = roundEndTime - roundStartTimestamp; // **计算回合用时**
							// --- 记录回合数据 --- <--- 添加此代码块
                            roundData.push({
                                round: stage.roundNumber,      // 当前回合数
                                playerBeans: player.score,     // 玩家在本回合吃的豆数
                                npcBeans: npcRoundScore        // NPC 在本回合吃的豆数
                            });
                            // --- 结束记录回合数据 ---
                            // --- 记录日志: 回合结束 ---
							if (typeof logGameEvent === 'function') {
                                 logGameEvent('RoundEnd', {
                                     round: stage.roundNumber,
                                     reason: 'all_beans_eaten', // 结束原因
									 playerRoundScore: player.score, // **记录玩家本回合得分**
									 npcRoundScore: npcRoundScore, // **记录NPC本回合得分**
									 endTimestamp: roundEndTime, // 记录结束时间戳
									 durationMs: roundDuration // **记录回合用时**
                                 });
                             }
							all_scores += player.score; // 累加玩家的总得分
							stage.status = 0; // 在切换前将当前舞台标记为非活动
							// 计算下一关索引
							const nextStageIndex = stage.index + 1;

							// 检查是否还有更多关卡
							if (nextStageIndex < _COIGIG.length + 2) { // +2因为前两页
								game.setStage(nextStageIndex);
							} else {
								// 没有更多关卡，跳转到结束画面
								game.setStage(_COIGIG.length + 2);
							}
						
						}

						// 检查玩家是否吃到了一半的豆子 (决策点)
                        // 仅当玩家处于活动状态 (非等待/帮助) 且弹窗未显示时检查
						if (player.score >= Math.floor(totalBeans / 2) && !stage.missionTriggered && !player.isWaiting && !player.isHelping) {
							stage.missionTriggered = true; // 标记任务已触发
							const decisionPointTimestamp = Date.now(); // **记录到达决策点的时间戳**
							// --- 记录日志: 到达决策点 ---
                            if (typeof logGameEvent === 'function') {
                                logGameEvent('HalfBeansReached', {
                                    playerScore: player.score,
                                    beansThreshold: Math.floor(totalBeans / 2),
                                    timestamp: decisionPointTimestamp // **记录时间戳**
                                });
                            }
							stage.status = 2; // 暂停游戏
							document.getElementById('missionPopup').style.display = 'block'; // 显示选择弹窗

							// 为等待/帮助按钮添加事件监听器 (确保只添加一次或进行管理)
                            // 如果可能，最好在 update 循环之外定义这些监听器
                            const waitBtn = document.getElementById('waitBtn');
                            const helpBtn = document.getElementById('helpBtn');

                            // 使用 .onclick 可能会覆盖之前的监听器，如果需要，考虑使用 addEventListener 并配合移除逻辑
                            waitBtn.onclick = function () {
								const choiceTimestamp = Date.now(); // **记录做出选择的时间戳**
                                document.getElementById('missionPopup').style.display = 'none'; // 隐藏弹窗
                                // --- 记录日志: 做出选择 ---
                                if (typeof logGameEvent === 'function') {
                                    logGameEvent('ChoiceMade', {
                                        choice: 'wait', // **记录选择**
                                        timestamp: choiceTimestamp, // **记录时间戳**
                                        timeSinceDecisionPointMs: choiceTimestamp - decisionPointTimestamp // 记录决策耗时
                                    });
                                }
                                player.isWaiting = true; // 设置玩家为等待模式
                                player.visible = false; // 隐藏玩家图像
                                stage.status = 1; // 恢复游戏运行
                                waitBtn.onclick = null; // 移除监听器防止重复调用
                                helpBtn.onclick = null;
                            };

                            helpBtn.onclick = function () {
								const choiceTimestamp = Date.now(); // **记录做出选择的时间戳**
                                document.getElementById('missionPopup').style.display = 'none'; // 隐藏弹窗
                                // --- 记录日志: 做出选择 ---
								if (typeof logGameEvent === 'function') {
                                    logGameEvent('ChoiceMade', {
                                        choice: 'help', // **记录选择**
                                        timestamp: choiceTimestamp, // **记录时间戳**
                                        timeSinceDecisionPointMs: choiceTimestamp - decisionPointTimestamp // 记录决策耗时
                                     });
                                }
                                player.isHelping = true; // 设置玩家为帮助模式 (继续游戏)
                                stage.status = 1; // 恢复游戏运行
                                waitBtn.onclick = null; // 移除监听器
                                helpBtn.onclick = null;
                            };
						} // End 检查半数豆子
					} else if (stage.status == 3) { // 玩家被抓状态 (当前未使用)
						// if(!stage.timeout){
                        //     // 玩家死亡逻辑曾在此处
                        //     // --- 记录日志: 玩家死亡确认 ---
                        //     if (typeof logGameEvent === 'function') { logGameEvent('PlayerDeath', { livesLeft: _LIFE }); }
						// 	if(_LIFE > 0){
						// 		stage.resetItems(); // 重置物体位置
                        //         stage.status = 1; // 恢复游戏
						// 	} else {
                        //         // --- 记录日志: 游戏结束 (无剩余生命) ---
                        //         if (typeof logGameEvent === 'function') { logGameEvent('GameOver', { finalScore: all_scores }); }
						// 		game.setStage(_COIGIG.length + 1); // 直接跳转到结束画面
						// 		return false; // 停止更新
						// 	}
						// }
					}
                    // stage.status == 2 是暂停状态, 不需要更新
				} // End of stage.update
			}); // End of game.createStage for game levels

			//绘制地图
			map = stage.createMap({
				x: 60,
				y: 10,
				data: config['map'],
				cache: true,
				draw: function (context) {
					context.lineWidth = 2;
					for (var j = 0; j < this.y_length; j++) {
						for (var i = 0; i < this.x_length; i++) {
							var value = this.get(i, j);
							if (value) {
								var code = [0, 0, 0, 0];
								if (this.get(i + 1, j) && !(this.get(i + 1, j - 1) && this.get(i + 1, j + 1) && this.get(i, j - 1) && this.get(i, j + 1))) {
									code[0] = 1;
								}
								if (this.get(i, j + 1) && !(this.get(i - 1, j + 1) && this.get(i + 1, j + 1) && this.get(i - 1, j) && this.get(i + 1, j))) {
									code[1] = 1;
								}
								if (this.get(i - 1, j) && !(this.get(i - 1, j - 1) && this.get(i - 1, j + 1) && this.get(i, j - 1) && this.get(i, j + 1))) {
									code[2] = 1;
								}
								if (this.get(i, j - 1) && !(this.get(i - 1, j - 1) && this.get(i + 1, j - 1) && this.get(i - 1, j) && this.get(i + 1, j))) {
									code[3] = 1;
								}
								if (code.indexOf(1) > -1) {
									context.strokeStyle = value == 2 ? "#FFF" : config['wall_color'];
									var pos = this.coord2position(i, j);
									switch (code.join('')) {
										case '1100':
											context.beginPath();
											context.arc(pos.x + this.size / 2, pos.y + this.size / 2, this.size / 2, Math.PI, 1.5 * Math.PI, false);
											context.stroke();
											context.closePath();
											break;
										case '0110':
											context.beginPath();
											context.arc(pos.x - this.size / 2, pos.y + this.size / 2, this.size / 2, 1.5 * Math.PI, 2 * Math.PI, false);
											context.stroke();
											context.closePath();
											break;
										case '0011':
											context.beginPath();
											context.arc(pos.x - this.size / 2, pos.y - this.size / 2, this.size / 2, 0, .5 * Math.PI, false);
											context.stroke();
											context.closePath();
											break;
										case '1001':
											context.beginPath();
											context.arc(pos.x + this.size / 2, pos.y - this.size / 2, this.size / 2, .5 * Math.PI, 1 * Math.PI, false);
											context.stroke();
											context.closePath();
											break;
										default:
											var dist = this.size / 2;
											code.forEach(function (v, index) {
												if (v) {
													context.beginPath();
													context.moveTo(pos.x, pos.y);
													context.lineTo(pos.x - _COS[index] * dist, pos.y - _SIN[index] * dist);
													context.stroke();
													context.closePath();
												}
											});
									}
								}
							}
						}
					}
				}
			});
			//物品地图
			beans = stage.createMap({
				x: 60,
				y: 10,
				data: config['map'],
				frames: 8,
				draw: function (context) {
					for (var j = 0; j < this.y_length; j++) {
						for (var i = 0; i < this.x_length; i++) {
							if (!this.get(i, j)) {
								var pos = this.coord2position(i, j);
								context.fillStyle = "#F5F5DC";
        // 如果配置对象中的 'goods' 属性在指定位置存在，则绘制一个圆形→现在让能量豆和普通豆长得一样
        if (config['goods'][i + ',' + j]) {
        /*  context.beginPath();
         context.arc(pos.x, pos.y, 3 + this.times % 2, 0, 2 * Math.PI, true);
         context.fill();
         context.closePath(); */
		 context.fillRect(pos.x - 2, pos.y - 2, 4, 4);
        } else {
         // 否则，绘制一个矩形
         context.fillRect(pos.x - 2, pos.y - 2, 4, 4);
        }
							}
						}
					}
				}
			});
			//关卡得分
			stage.createItem({
				x: 690,
				y: 80,
				draw: function (context) {
					// 显示玩家个人得分
					// 显示玩家个人得分
					context.font = 'bold 24px PressStart2P';
					context.textAlign = 'left';
					context.textBaseline = 'bottom';
					context.fillStyle = '#C33'; // 红色标题
					context.fillText('你的分数', this.x, this.y - 62 + 10);
					context.font = '24px PressStart2P';
					context.textAlign = 'left';
					context.textBaseline = 'top';
					context.fillStyle = '#FFF'; // 白色分数
					context.fillText(player.score, this.x + 12, this.y - 52+ 10);

					// 显示NPC得分 (使用 npcRoundScore)
					context.font = 'bold 24px PressStart2P';
					context.textAlign = 'left';
					context.textBaseline = 'bottom';
					context.fillStyle = '#4CAF50'; // 绿色标题表示队友/NPC
					context.fillText('队友分数', this.x, this.y+ 20);
					context.font = '24px PressStart2P';
					context.textAlign = 'left';
					context.textBaseline = 'top';
					context.fillStyle = '#FFF'; // 白色分数
					context.fillText(npcRoundScore, this.x + 12, this.y + 20+ 10);

					// 显示关卡
					context.font = 'bold 24px PressStart2P';
					context.textAlign = 'left';
					context.textBaseline = 'bottom';
					context.fillStyle = '#C33'; // 红色标题
					context.fillText('轮次', this.x, this.y + 82+ 10);
					context.font = '24px PressStart2P';
					context.textAlign = 'left';
					context.textBaseline = 'top';
					context.fillStyle = '#FFF'; // 白色数字
					context.fillText(stage.roundNumber, this.x + 12, this.y + 92+ 10); // 使用 stage.roundNumber
				}
			});
			//状态文字
			stage.createItem({
				x: 690,
				y: 285,
				frames: 25,
				draw: function (context) {
					if (stage.status == 2 && this.times % 2) {
						context.font = '24px PressStart2P';
						context.textAlign = 'left';
						context.textBaseline = 'center';
						context.fillStyle = '#FFF';
						context.fillText('PAUSE', this.x, this.y);
					}
				}
			});

			//豆子数量显示 (原为生命值显示)
			stage.createItem({
				x: 705,
				y: 510,
				width: 30, // 图标宽度 (未使用)
				height: 30, // 图标高度 (未使用)
				draw: function (context) {
					// 绘制一个豆子图标? 或者只显示文字。
					var x = this.x -15 , y = this.y; // 调整位置
                    context.fillStyle = '#F5F5DC'; // 豆子颜色
                    context.fillRect(x - 5, y - 5, 10, 10); // 绘制一个方形代表豆子

					context.font = '18px PressStart2P'; // "X" 的字体
					context.textAlign = 'left';
					context.textBaseline = 'center';
					context.fillStyle = '#FFF'; // 白色 "X"
					context.fillText('X', this.x + 10, this.y); // 在图标旁边绘制 "X"
					context.font = '24px PressStart2P'; // 数量的字体
					context.fillText(remainingBeans, this.x + 40, this.y); // 显示剩余豆子数量
				}
			});
			
			//NPC
			for (var i = 0; i < 1; i++) {//1个NPC
				stage.createItem({
					width: 30,
					height: 30,
					orientation: 3,
					color: _COLOR[i],
					location: map,
					coord: { x: 18 + i, y: 8 },
					vector: { x: 12 + i, y: 14 },
					type: 2,
					frames: 10,
					speed: 10,//NPC的速度
					timeout: Math.floor(Math.random() * 120),
					status: 1, // 初始状态 (正常)
                    _id: i, // 明确分配 ID 用于日志记录
                    path: [], // 存储寻路路径
					startDelay: Math.floor(Math.random() * 30) + 90,  // 0.5~2秒的延迟（60帧=1秒）
					active: false,  // 是否开始活动 初始为非活动状态
					update: function () {
						// 如果还在延迟启动阶段
						if (!this.active) {
							if (this.startDelay > 0) {
								this.startDelay--;
								return;  // 直接返回，不执行任何移动
							} else {
								this.active = true; // 延迟结束，激活 NPC
                                 // --- 记录日志: NPC 激活 ---
                                 if (typeof logGameEvent === 'function') {
                                     logGameEvent('NPCStateChange', { npcId: this._id, newState: 'activated' }); // 记录状态变为 'activated'
                                 }
							}
							
						}

						var new_map;
						if (this.status == 3 && !this.timeout) {
							this.status = 1;
						}
						if (!this.coord.offset) { // 到达坐标中心时计算
							// 检查当前位置是否有豆子
							if (!beans.get(this.coord.x, this.coord.y)) {
								// 如果有豆子，将其移除
								beans.set(this.coord.x, this.coord.y, 1);
								npcRoundScore++; // 增加 NPC 本回合得分
								remainingBeans--; // 减少剩余豆子
								const eatTimestamp = Date.now(); // **记录 NPC 吃豆时间戳**
								// --- 记录日志: NPC 吃豆 ---
                                if (typeof logGameEvent === 'function') {
                                    logGameEvent('NPCBeanEaten', {
                                        npcId: this._id,
                                        position: { x: this.coord.x, y: this.coord.y },
                                        npcRoundScore: npcRoundScore,
                                        remainingBeans: remainingBeans,
                                        timestamp: eatTimestamp // **记录时间戳**
                                    });
                                }
							}
							

							if (this.status == 1) {
								if (!this.timeout) { // 定时器
									new_map = JSON.parse(JSON.stringify(map.data).replace(/2/g, 0));
									var id = this._id;
									items.forEach(function (item) {
										if (item._id != id && item.status == 1) {
											new_map[item.coord.y][item.coord.x] = 1;
										}
									});
									
									// If player is waiting, find nearest bean instead of player
									if (player.isWaiting) {
										// Find all remaining beans
										let beanCoords = [];
										for (let y = 0; y < beans.data.length; y++) {
											for (let x = 0; x < beans.data[y].length; x++) {
												if (!beans.data[y][x]) {
													beanCoords.push({x: x, y: y});
												}
											}
										}
										
										// Find nearest bean
										if (beanCoords.length > 0) {
											let nearest = beanCoords[0];
											let minDist = Infinity;
											beanCoords.forEach(coord => {
												let dx = coord.x - this.coord.x;
												let dy = coord.y - this.coord.y;
												let dist = dx*dx + dy*dy;
												if (dist < minDist) {
													minDist = dist;
													nearest = coord;
												}
											});
											this.path = map.finder({
												map: new_map,
												start: this.coord,
												end: nearest
											});
										}
									} else {
										// Normal behavior - chase player 不行 还是要自动寻豆
										// Find all remaining beans
										let beanCoords = [];
										for (let y = 0; y < beans.data.length; y++) {
											for (let x = 0; x < beans.data[y].length; x++) {
												if (!beans.data[y][x]) {
													beanCoords.push({x: x, y: y});
												}
											}
										}
										
										// Find nearest bean
										if (beanCoords.length > 0) {
											let nearest = beanCoords[0];
											let minDist = Infinity;
											beanCoords.forEach(coord => {
												let dx = coord.x - this.coord.x;
												let dy = coord.y - this.coord.y;
												let dist = dx*dx + dy*dy;
												if (dist < minDist) {
													minDist = dist;
													nearest = coord;
												}
											});
											this.path = map.finder({
												map: new_map,
												start: this.coord,
												end: nearest
											});
										}
									}
									
									if (this.path.length) {
										this.vector = this.path[0];
									}
								}
							}
							// 是否转变方向
							if (this.vector.change) {
								this.coord.x = this.vector.x;
								this.coord.y = this.vector.y;
								var pos = map.coord2position(this.coord.x, this.coord.y);
								this.x = pos.x;
								this.y = pos.y;
							}
							// 方向判定
							if (this.vector.x > this.coord.x) {
								this.orientation = 0;
							} else if (this.vector.x < this.coord.x) {
								this.orientation = 2;
							} else if (this.vector.y > this.coord.y) {
								this.orientation = 1;
							} else if (this.vector.y < this.coord.y) {
								this.orientation = 3;
							}
						}
						// 只有在激活状态下才移动
						if (this.active) {
							this.x += this.speed * _COS[this.orientation];
							this.y += this.speed * _SIN[this.orientation];
						}
					},
					draw: function (context) {
						context.fillStyle = '#20E100';
						context.beginPath();
						if (this.times % 2) {
							context.arc(this.x, this.y, this.width / 2, (.5 * this.orientation + .20) * Math.PI, (.5 * this.orientation - .20) * Math.PI, false);
						} else {
							context.arc(this.x, this.y, this.width / 2, (.5 * this.orientation + .01) * Math.PI, (.5 * this.orientation - .01) * Math.PI, false);
						}
						context.lineTo(this.x, this.y);
						context.closePath();
						context.fill();
					}
				});
			}
			items = stage.getItemsByType(2);
			//主角
			player = stage.createItem({
				width: 30,
				height: 30,
				type: 1,
				location: map,
				visible: true,
				coord: { x: 13.5, y: 23 },  //玩家初始位置
				orientation: 2,  //玩家初始方向0：朝右  1：朝下  2：朝左  3：朝上				
				speed: 1,  //玩家速度
				score: 0, // 添加玩家个人分数
				frames: 10,
				moving: false,  // 添加移动状态标志
				update: function () {
					var coord = this.coord;
					
					// 如果玩家处于等待模式，不进行任何更新
					if (this.isWaiting) {
						return;
					}
					const currentTileX = Math.floor(this.coord.x); // 先获取当前格子
                    const currentTileY = Math.floor(this.coord.y);
					if (!coord.offset) {  // 在格子中心点
						if (typeof this.control.orientation != 'undefined') {
							// 检查前方格子
							var nextValue = map.get(coord.x + _COS[this.control.orientation], coord.y + _SIN[this.control.orientation]);
							// 如果前方是空地(0)或传送门(<0)
							if (nextValue <= 0) {
								this.orientation = this.control.orientation;
								if (nextValue < 0) {
									// 传送门逻辑
									if (typeof logGameEvent === 'function') { logGameEvent('PlayerPortal', { from: {x: coord.x, y:coord.y}, timestamp: Date.now() }); }
									this.x -= map.size * (map.x_length - 1) * _COS[this.orientation];
									this.y -= map.size * (map.y_length - 1) * _SIN[this.orientation];
									this.moving = false;
								} else {
									// 普通移动
									this.x += this.speed * _COS[this.orientation];
									this.y += this.speed * _SIN[this.orientation];
								}
							} else {
								this.moving = false;  // 如果撞墙，允许新的移动
							}
						}
						this.control = {};
						if (this.moving && coord.offset === 0) {
							this.moving = false;  // 完成一格移动
						}
					} else {  // 在格子之间移动
						if (!beans.get(this.coord.x, this.coord.y)) {    //吃豆
							const eatTimestamp = Date.now(); // **记录玩家吃豆时间戳**
                        	const isPowerPellet = !!config['goods'][currentTileX + ',' + currentTileY];
                        	beans.set(currentTileX, currentTileY, 1);
							_SCORE++; 
							this.score++; // 增加玩家的个人分数
							remainingBeans--;
							// --- 记录日志: 玩家吃豆 ---
							if (typeof logGameEvent === 'function') {
								logGameEvent('PlayerBeanEaten', {
									position: { x: currentTileX, y: currentTileY },
									isPowerPellet: isPowerPellet,
									playerRoundScore: this.score,
									remainingBeans: remainingBeans,
									timestamp: eatTimestamp // **记录时间戳**
								});
							}
							beans.set(this.coord.x, this.coord.y, 1);
						}
						// 继续移动到格子中心
						this.x += this.speed * _COS[this.orientation];
						this.y += this.speed * _SIN[this.orientation];
					}
				},
				draw: function (context) {
					context.fillStyle = '#FFE600';
					context.beginPath();
					if (stage.status != 3) {	//玩家正常状态
						if (this.times % 2) {
							context.arc(this.x, this.y, this.width / 2, (.5 * this.orientation + .20) * Math.PI, (.5 * this.orientation - .20) * Math.PI, false);
						} else {
							context.arc(this.x, this.y, this.width / 2, (.5 * this.orientation + .01) * Math.PI, (.5 * this.orientation - .01) * Math.PI, false);
						}
					} else {	//玩家被吃
						if (stage.timeout) {
							context.arc(this.x, this.y, this.width / 2, (.5 * this.orientation + 1 - .02 * stage.timeout) * Math.PI, (.5 * this.orientation - 1 + .02 * stage.timeout) * Math.PI, false);
						}
					}
					context.lineTo(this.x, this.y);
					context.closePath();
					context.fill();
				}
			});
			//事件绑定
			var keyPressed = false;  // 添加按键状态控制变量

			stage.bind('keydown', function (e) {
				if (document.getElementById('missionPopup').style.display === 'block') {
					return;
				}
				if (!keyPressed) {  // 只有当没有按键被按下时才处理新的按键
					let requestedOrientation = -1;
					switch (e.keyCode) {
						case 13: //回车
							if (stage.status == 0) {    //游戏开始
								stage.status = 1;
							} else if (stage.status == 2) {    //游戏结束
								stage.status = 0;
								stage.init();
							}
							break;
						case 37: //左
							player.control = { orientation: 2 };
							keyPressed = true;
							requestedOrientation = 2;
							break;
						case 38: //上
							player.control = { orientation: 3 };
							keyPressed = true;
							requestedOrientation = 2;
							break;
						case 39: //右
							player.control = { orientation: 0 };
							keyPressed = true;
							requestedOrientation = 2;
							break;
						case 40: //下
							player.control = { orientation: 1 };
							keyPressed = true;
							requestedOrientation = 2;
							break;
					}
					if (requestedOrientation !== -1) {
						const inputTimestamp = Date.now(); // **记录按键时间戳**
						// --- 记录日志: 玩家输入 ---
						if (typeof logGameEvent === 'function') {
							logGameEvent('PlayerInput', {
								key: e.key || e.code || e.keyCode,
								requestedOrientation: requestedOrientation,
								timestamp: inputTimestamp // **记录时间戳**
							   });
						}
						
				
				   }
				}
			});

			stage.bind('keyup', function (e) {
				// 当方向键抬起时，重置按键状态
				if (e.keyCode >= 37 && e.keyCode <= 40) {
					keyPressed = false;
				}
			});
		});

	})();
	//结束画面
	(function () {
		var stage = game.createStage({
            init: function() { // 添加 init 函数
                 this.status = 1; // 确保状态激活
                 // --- 记录日志: 游戏结束画面 ---
                 if (typeof logGameEvent === 'function') {
                     logGameEvent('GameEnd', {
                          finalPlayerTotalScore: all_scores, // 玩家所有回合总分
                          finalNpcTotalScore: total_scores - all_scores, // NPC 所有回合总分 (推算)
                          finalTeamTotalScore: total_scores, // 团队总分 (所有豆子数)
                          endTimestamp: Date.now() // 记录到达结束画面的时间戳
                        });
                 }
                 // 显示导出按钮
                 if (typeof showExportButton === 'function') {
                      showExportButton();
                 } else {
                      console.error("结束画面无法找到 showExportButton 函数。");
                 }
            }
       });
		/* //游戏结束文字 (位置可调整)
		stage.createItem({
			x: game.width / 2,
			y: game.height * .15, // 稍微上移
			draw: function (context) {
				context.fillStyle = '#FFF';
				context.font = 'bold 36px PressStart2P'; // 可调整大小
				context.textAlign = 'center';
				context.textBaseline = 'middle';
				context.fillText('游戏结束', this.x, this.y); // 可以根据输赢调整文字，但简单起见先统一
			}
		}); */

		//记分 Item (修改这里以包含表格)
		stage.createItem({
			x: game.width / 2,
			y: game.height * .1, // 调整 Y 轴起始位置
			draw: function (context) {
				context.fillStyle = '#FFF';
				context.font = '16px PressStart2P'; // 总分字体
				context.textAlign = 'center';
				context.textBaseline = 'middle';

				// --- 1. 显示总计得分 ---
				let currentY = this.y; // 当前绘制的 Y 坐标
				context.fillText('总计得分:', this.x, currentY);
				currentY += 30; // 向下移动

				context.textAlign = 'left'; // 左对齐显示详情
                let textStartX = this.x - 150; // 左侧文本起始 X
				context.fillText('  你的总分: ' + all_scores, textStartX, currentY);
				currentY += 25;
                // 计算 NPC 总分用于显示
                let totalNpcScore = roundData.reduce((sum, round) => sum + round.npcBeans, 0);
				context.fillText('  队友总分: ' + totalNpcScore, textStartX, currentY);
                // 或者使用推算的: context.fillText('  队友总分: ' + (total_scores - all_scores), textStartX, currentY);
				currentY += 25;
				context.fillText('  团队总分: ' + total_scores, textStartX, currentY);
				currentY += 45; // 表格前的间距

				// --- 2. 显示每轮详情表格 ---
				context.textAlign = 'center'; // 表头居中
				context.font = 'bold 16px PressStart2P';
				context.fillText('每轮详情', this.x, currentY);
				currentY += 30; // 标题下间距

				// 表头
				context.font = '14px PressStart2P'; // 表格内容字体可以小一点
				let headerX_Round = this.x - 130; // 调整各列的 X 坐标
				let headerX_Player = this.x;
				let headerX_NPC = this.x + 130;
				context.fillStyle = '#AAA'; // 表头用灰色
				context.fillText('轮次', headerX_Round, currentY);
				context.fillText('你吃的豆数', headerX_Player, currentY);
				context.fillText('队友吃的豆数', headerX_NPC, currentY);
                currentY += 5; // 加一点点分割线空间（可选）
                // context.strokeStyle = '#555'; // 分割线颜色
                // context.beginPath();
                // context.moveTo(headerX_Round - 40, currentY);
                // context.lineTo(headerX_NPC + 80, currentY);
                // context.stroke();
				currentY += 20; // 表头后的间距

				// 表格数据行
				context.fillStyle = '#FFF'; // 数据用白色
				roundData.forEach(data => { // 遍历记录好的回合数据
					context.fillText(data.round, headerX_Round, currentY);       // 显示轮次
					context.fillText(data.playerBeans, headerX_Player, currentY); // 显示玩家豆数
					context.fillText(data.npcBeans, headerX_NPC, currentY);    // 显示 NPC 豆数
					currentY += 22; // 下一行的 Y 坐标，调整行间距
				});
			}
		});
		//事件绑定
		stage.bind('keydown', function (e) {
			switch (e.keyCode) {
				case 13: //回车
				case 32: //空格
					_SCORE = 0;
					_LIFE = 5;
					game.setStage(1);
					break;
			}
		});
	})();

	const myFont = new FontFace('PressStart2P', 'url(./static/font/PressStart2P.ttf)');
	myFont.load().then(font => {
		document.fonts.add(font);
		game.init();
	});
})();
